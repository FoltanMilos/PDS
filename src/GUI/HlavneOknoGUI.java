/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;


import generatorDat.GeneratorDat;
//import it.grabz.grabzit.GrabzItClient;


import java.io.File;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;

import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import org.knowm.xchart.XYChart;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.jsoup.Jsoup;
import org.jsoup.select.Elements;
import org.knowm.xchart.PieChart;
import org.knowm.xchart.PieChartBuilder;
import org.knowm.xchart.QuickChart;
import org.knowm.xchart.SwingWrapper;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import semestralka1.Jadro;
import semestralka1.Osoba;
/**
 *
 * @author folko
 */
public class HlavneOknoGUI extends javax.swing.JFrame {
    private Jadro jadro;
    private GeneratorDat gener;
    /**
     * Creates new form HlavneOknoGUI
     */
    public HlavneOknoGUI() {
        this.jadro = new Jadro();
        
        try {
            this.gener = new GeneratorDat();
        } catch (IOException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(950, 500));
        setResizable(false);
        getContentPane().setLayout(null);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(470, 0, 460, 440);

        jScrollPane4.setViewportView(jEditorPane1);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(0, 0, 480, 440);

        jMenu2.setText("Menu");

        jMenuItem2.setText("Narodeniny zamestnancov");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem20.setText("Zobrazenie zamest. rozvrhu");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem20);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Reporty");

        jMenuItem1.setText("Vyťaženie zamestnancov(XML)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem3.setText("Celkove vytazenie zamestnanca");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem13.setText("Vyťaženie zamestnancov");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuItem14.setText("Analýza tržieb za celé obdobie");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem14);

        jMenuItem15.setText("Analýza poruchovosti áut");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem15);

        jMenuItem16.setText("Analýza stavu vozidiel");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem16);

        jMenuItem18.setText("Analýza protokolov (neprešli STK)");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem18);

        jMenuItem19.setText("Zamestnancov zarobok pre firmu");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem19);

        jMenuItem21.setText("Tržby podľa typu kontroly");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem21);

        jMenuItem22.setText("Analýza tržieb kontrol v roku (mesačne)");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem22);

        jMenuItem23.setText("Štatistika vozidiel čo neprešli");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem23);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Indexy");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jMenuItem17.setText("Zobraz indexy");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem17);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Pohľady");

        jMenuItem4.setText("Vozidla stk");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem5.setText("Zamestnanci");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem6.setText("Kontroly auta");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Generatory");

        jMenuItem8.setText("Zamestnanci");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem8);

        jMenuItem9.setText("Osobne udaje");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem9);

        jMenuItem10.setText("Kontroly");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem10);

        jMenuItem11.setText("Protokoly");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem11);

        jMenuItem12.setText("Vozidla");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem12);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //vytazenie vsetkych zamestnancov
        JSliderOnJOptionPane ret = new JSliderOnJOptionPane();
        int[] retval = ret.mJSliderOnJOptionPane(this);
        String odpoved = this.jadro.getDbManipulation().executeProcedure("analyzaVytazeniaZamestnancov("+retval[0]+","+retval[1]+")")  ;  //reportVytazeniaZamestnancov(retval[0],retval[1]);
        this.jEditorPane1.setContentType("text");
        this.jEditorPane1.setText(odpoved);
        //tu parsuj XML
        /*
         try{
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(odpoved));
	Document doc = dBuilder.parse(is);
        
        doc.getDocumentElement().normalize();
        NodeList rows = doc.getElementsByTagName("ROW");
        String[] data = new String[4];
        for(int i = 0; i < rows.getLength(); i++){
           Node row = rows.item(i);
           if(row.getNodeType() == Node.ELEMENT_NODE){
               Element el = (Element) row;
               data[0] = el.getElementsByTagName("MENO").item(0).getTextContent();
               data[1] = el.getElementsByTagName("PRIEZVISKO").item(0).getTextContent();
               data[2] = el.getElementsByTagName("ROD_CISLO").item(0).getTextContent();
               data[3] = el.getElementsByTagName("POCET").item(0).getTextContent();
           }
            
        }
        
        for(String i: data){
            System.out.println(i);
        }
        }catch(Exception e){
            System.out.println("error happened: No data to display");
        }
        */
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private String parseXMLToPDF(String xml){
        
        String result = "";
        try{
        File file = new File("tmp.html");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
	Document doc = dBuilder.parse(is);
        org.jsoup.nodes.Document html = Jsoup.parse(file,"UTF-8","");
        doc.getDocumentElement().normalize();
        Element zamestnanec = (Element) doc.getElementsByTagName("Zamestnanec").item(0);
        NodeList rows = zamestnanec.getElementsByTagName("Vykon");
        Elements table = html.select("tbody");
        org.jsoup.nodes.Element content = table.get(0);
        org.jsoup.nodes.Element contentRow = html.createElement("tr");
        org.jsoup.nodes.Element col = html.createElement("td");
        col.appendText(zamestnanec.getAttribute("Meno"));
        contentRow.appendChild(col);
        col = html.createElement("td");
        col.appendText(zamestnanec.getAttribute("Priezvisko"));
        contentRow.appendChild(col);
        col = html.createElement("td");
        col.appendText(zamestnanec.getAttribute("IdZamestnanca"));
        contentRow.appendChild(col);
        col = html.createElement("td");
        col.appendText(zamestnanec.getAttribute("PopisPozicie"));
        contentRow.appendChild(col);
         col = html.createElement("td");
        col.appendText(zamestnanec.getAttribute("ZamestnanyOD"));
        contentRow.appendChild(col);
         col = html.createElement("td");
        col.appendText(zamestnanec.getAttribute("DatumUkonceniaPomeru"));
        contentRow.appendChild(col);
        content.appendChild(contentRow);
        Element creationDate = (Element)doc.getElementsByTagName("za").item(0);
        String  creationDateStr = zamestnanec.getAttribute("DatumVytvorenia").substring(0,11);
        Elements span = html.select("span");
        org.jsoup.nodes.Element creationDateHTML = span.get(0);
        creationDateHTML.appendText(creationDateStr);
        content = table.get(1);
        for(int i = 0 ; i < rows.getLength(); i++){
            String[] data = new String[5];
               Node row = rows.item(i);
               if(row.getNodeType() == Node.ELEMENT_NODE){
                   Element el = (Element) row;
                    data[0] = el.getElementsByTagName("Rok").item(0).getTextContent();
                   data[1] = el.getAttribute("IdKontroly");
                   data[2] = el.getElementsByTagName("ZaciatokKontroly").item(0).getTextContent().split(" ")[1];
                   data[3] = el.getElementsByTagName("KoniecKontroly").item(0).getTextContent().split(" ")[1];
                   data[4] = el.getElementsByTagName("TypKontroly").item(0).getTextContent();
               }
  
            contentRow = html.createElement("tr");
            for(String item : data){
                col = html.createElement("td");
                col.appendText(item);
                contentRow.appendChild(col);
            }
            content.appendChild(contentRow);
            
        }
        result = html.html();
        }catch(Exception e){
            System.out.println("error happened: No data to display");
            this.jEditorPane1.setContentType("text");
            this.jEditorPane1.setText("error happened: No data to display");
            //System.err.println(e.getMessage());
        }
        
        return result;
    }
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //kolko dni chyba do narodenim zamestnancom
         ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select meno, priezvisko,id_zamestnanca as id, popis as pozicia,\n" +
"case when \n" +
"    sysdate < to_date(to_char(sysdate,'YYYY') || '-' ||\n" +
"    MOD(substr(rod_cislo,3,2),50) || '-' || substr(rod_cislo,5,2) ,\n" +
"    'YYYY-MM-DD')\n" +
"     then \n" +
"    ceil(trunc( to_date(to_char(sysdate,'YYYY') || '-' ||\n" +
"    MOD(substr(rod_cislo,3,2),50) || '-' || substr(rod_cislo,5,2) ,\n" +
"    'YYYY-MM-DD')-sysdate,3) )\n" +
"    else\n" +
"    ceil(trunc(to_date(to_char(sysdate,'YYYY')+1 || '-' ||\n" +
"    MOD(substr(rod_cislo,3,2),50) || '-' || substr(rod_cislo,5,2) ,\n" +
"    'YYYY-MM-DD')-sysdate,3))\n" +
"    end\n" +
"    as pocet_dni,\n" +
"substr(rod_cislo,5,2) || '.' || \n" +
"MOD(substr(rod_cislo,3,2),50) || '.'\n" +
"as dat_nar\n" +
"from s_zamestnanec\n" +
"    join s_os_udaje using(rod_cislo)\n" +
"        join s_typ_pozicie using(id_typu)"
                 + " where datum_do is null or datum_do > sysdate");
        
        try {
            this.jTable2.setModel(TableModels.UniversalTableModel.buildTableModel(executeQuery));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        String s = this.okno2(this.jadro.getDbManipulation().getZamestnanciNaVyber(),"Zamestnanci");
        if ((s != null) && (s.length() > 0)) {
            String[] ss = s.split("\\-");
            //celkove vytazenie zamestnanca
            double[] yData = new double[] { 56,25,32,38,21 };
            double[] xData = new double[] { 1998, 2003, 2008,2013,2018 };
            
            
            
            String xml = this.parseXMLToPDF(this.jadro.getDbManipulation().reportVytazeniaZam(ss[3].trim()));
            org.jsoup.nodes.Document html = Jsoup.parse(xml);
            Elements table = html.select("td");
            String beginYearStr = table.get(4).html();
            String endYearStr= "0";
            try{
                endYearStr = table.get(6).html();
            }catch(Exception e){
                endYearStr = "0";
            }
            String CreationYearStr = html.select("span").get(0).html();
            
            int beginYear = Integer.parseInt(beginYearStr.substring(0, 4));

        int endYear;
            if(endYearStr == "0"){
                endYear = Integer.parseInt(CreationYearStr.substring(CreationYearStr.length()-11, CreationYearStr.length()-15));
            }else{
                endYear = Integer.parseInt(endYearStr.substring(0, 4));
            }
            xData = new double[endYear-beginYear + 1];
            yData = new double[endYear-beginYear + 1];
            for(int i = beginYear ; i < endYear + 1 ; i++){
                xData[i - beginYear] = i;
            }
            Elements tableRows = html.select("tbody").get(1).children().select("tr");
            for (org.jsoup.nodes.Element i : tableRows){
                String [] date = i.children().get(0).html().split("-");
                int year = Integer.parseInt(date[0]);
                yData[year - beginYear] ++;
            }
            
            
            
            
            
            //hlavicka tabulky
            XYChart chart = QuickChart.getChart("Vykonnost zamestnanca " + ss[2] + " " + ss[3],
                    "X", "Y", "y(x)", xData, yData);

            

            
            
            Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                
                SwingWrapper swingWrapper = new SwingWrapper(chart); //.displayChart();
                JFrame displayChart = swingWrapper.displayChart();
                displayChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                
            }

            });
            t.start();
            this.jEditorPane1.setContentType("text/html");
            this.jEditorPane1.setText(xml);
        }else{
            this.jEditorPane1.setText("Nebol vybraty zamestnanec!");
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed
 
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.jEditorPane1.setText("Auta z stk");
        Osoba osoba = new Osoba("961003/6095".toCharArray(), "Milos", "Foltan", "1996-10-30".toCharArray());
        
        ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select * from s_vozidlo");
        
        try {
            this.jTable2.setModel(TableModels.UniversalTableModel.buildTableModel(executeQuery));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select id_zamestnanca,meno,priezvisko from (select id_zamestnanca,meno,priezvisko, row_number() over(order by rod_cislo)"
                + " as rn from s_zamestnanec"
                + " join s_os_udaje using(rod_cislo)) where rn < 20");
        try {
            this.jTable2.setModel(TableModels.UniversalTableModel.buildTableModel(executeQuery));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        String s = this.okno2(this.jadro.getDbManipulation().getVehicles(),"Vozidlo");
        String podm = "";
        if ((s != null) && (s.length() > 0)) {
            String[] ss = s.split("\\-");
            podm = ss[0];
            

            ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select id_kontroly,popis_typu as popisKontroly,"
                    + " s_stav_vozidla.popis as popisStavu"
                    + " from s_protokol join s_kontrola using "
                    + "(id_kontroly) join s_typ_kontroly using(id_typu) join s_stav_vozidla using(id_stavu) where id_vozidla =" + podm);

            try {
                this.jTable2.setModel(TableModels.UniversalTableModel.buildTableModel(executeQuery));
            } catch (SQLException ex) {
                Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        //okno na pocet
        Object[] possibilities = {10,100,1000,100000};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyber pocet ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "ham");

        //If a string was returned, say so.
        //if ((s != null) && (s.length() > 0)) {
        //    String[] ss = s.split("\\ ");
        if(s != null){
             this.gener.generujZamestnancov(Integer.parseInt(s));// Integer.parseInt(ss[0])
        }
       // }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        //okno na pocet
        Object[] possibilities = {10,100,1000,100000};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyber pocet ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "ham");
        if(s != null){
         this.gener.generujObcanov(Integer.parseInt(s));// Integer.parseInt(ss[0])
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        //okno na pocet
        Object[] possibilities = {10,100,1000,100000};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyber pocet ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "ham");
        if(s != null){
         this.gener.generujKontroly(Integer.parseInt(s));// Integer.parseInt(ss[0])
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        //okno na pocet
        Object[] possibilities = {10,100,1000,100000};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyber pocet ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "ham");
        //TODO: GENEROVANIE PROTOKOLOV
        if(s != null){
            
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        //okno na pocet
        Object[] possibilities = {10,100,1000,100000};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyber pocet ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "ham");
        if(s != null){
            this.gener.generujVozidla(Integer.parseInt(s));// Integer.parseInt(ss[0])
        }
         
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed

        ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select id_zamestnanca, meno, priezvisko, trunc(count(id_kontroly)/podiel_na_kontrolach(),2)*100 || '%'  as podielNaKontrolach from s_os_udaje join s_zamestnanec sz using(rod_cislo)\n" +
"        left join s_kontrola using (id_zamestnanca)\n" +
"            join s_typ_pozicie stp on(sz.id_typu=stp.id_typu)\n" +
"                where stp.id_typu=6 \n" +
                "and (datum_do is null or datum_do > sysdate)" +
"                    group by meno, priezvisko,  id_zamestnanca\n" +
"                        order by podielNaKontrolach desc");

        try {
            this.jTable2.setModel(TableModels.UniversalTableModel.buildTableModel(executeQuery));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        try {
            //analyza tryieb ya cele obdobie
            String clobXML = this.jadro.getDbManipulation().executeProcedure("analyzatrzieb()");
            
            
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            StringBuilder xmlStringBuilder = new StringBuilder();
            xmlStringBuilder.append(clobXML);
            ByteArrayInputStream input = new ByteArrayInputStream(
               xmlStringBuilder.toString().getBytes("UTF-8"));
            Document doc = dBuilder.parse(input);
            
                   
            doc.getDocumentElement().normalize();
            System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
            Element zamestnanec = (Element) doc.getElementsByTagName("ROWSET").item(0);
            NodeList rows = zamestnanec.getElementsByTagName("ROW");
            
            //TABLE DATA
            double[] yData = new double[19];
            double[] xData = new double[19];
            
            
            for(int i = 0 ; i < rows.getLength(); i++){
            String[] data = new String[2];
               Node row = rows.item(i);
               if(row.getNodeType() == Node.ELEMENT_NODE){
                   Element el = (Element) row;
                   data[0] = el.getElementsByTagName("SUMA").item(0).getTextContent();
                   data[1] = el.getElementsByTagName("ROK").item(0).getTextContent();
                   
                   //to tbl
                   int poz = Integer.parseInt(data[1]) - 2000;
                   xData[poz] = Double.parseDouble(data[1].trim());
                   yData[poz] = Double.parseDouble(data[0].trim());
                }
            }
            //doplnenie prazdnych rokov
            for (int i = 0; i <  xData.length ;i++) {
                if(xData[i] == 0.0){
                    xData[i] = 2000 + i;
                }
           }
            
            //hlavicka tabulky
            XYChart chart = QuickChart.getChart("Trzby za cele obdobie",
                    "Roky", "Trzby v eur", "Eur", xData, yData);
            //spustenie grafu
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    
                    SwingWrapper swingWrapper = new SwingWrapper(chart); //.displayChart();
                    JFrame displayChart = swingWrapper.displayChart();
                    displayChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    
                }
                
            });
            t.start();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        //analyza poruchovosti aut
        /*
        Object[] possibilities = {"osobne","kamiony","autobusy"};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyberte typ vozidiel ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "osobne");

        //If a string was returned, say so.
        //if ((s != null) && (s.length() > 0)) {
        //    String[] ss = s.split("\\ ");
        if(s != null){
            
        }
        */
        
        ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select value(a).id as id_auta,id_protokolu,sv.popis as stav,sp.popis,popis_typu as typKontroly, datum_kontroly \n" +
"from s_vozidlo a join s_protokol sp on(sp.id_vozidla=value(a).id)\n" +
"    join s_stav_vozidla sv using(id_stavu)\n" +
"        join s_kontrola using(id_kontroly)\n" +
"            join s_typ_kontroly using(id_typu)\n" +
"                where id_stavu in (2,3,5,7)");

        try {
            this.jTable2.setModel(TableModels.UniversalTableModel.buildTableModel(executeQuery));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //ESTE PIE CHART
        PieChart chart = new PieChartBuilder().width(800).height(600).title(getClass().getSimpleName()).build();
 
            // Customize Chart
            Color[] sliceColors = new Color[] { new Color(224, 68, 14), new Color(230, 105, 62), new Color(236, 143, 110)};
            chart.getStyler().setSeriesColors(sliceColors);

            // Series
            
            executeQuery = this.jadro.getDbManipulation().executeQuery("select\n" +
"    count(case when value(a) is of (only s_trieda_auto) then 1 end) as osobne,\n" +
"    count(case when value(a) is of (only s_trieda_kamion) then 1 end) as kamion,\n" +
"    count(case when value(a) is of (only s_trieda_autobus) then 1 end) as autobus\n" +
"from s_vozidlo a join s_protokol sp on(sp.id_vozidla=value(a).id)\n" +
"   join s_stav_vozidla sv using(id_stavu)\n" +
"        join s_kontrola using(id_kontroly)\n" +
"            join s_typ_kontroly using(id_typu)\n" +
"                where id_stavu in (2,3,5,7)");
            
         
            
        try {
            executeQuery.next();
            chart.addSeries("osobne", Integer.parseInt(executeQuery.getString("osobne")));
            chart.addSeries("kamiony", Integer.parseInt(executeQuery.getString("kamion")));
            chart.addSeries("autobusy", Integer.parseInt(executeQuery.getString("autobus")));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
        chart.setTitle("Analýza poruchovost vozidiel");
         Thread t = new Thread(new Runnable() {
            @Override
            public void run() { 
               // pieChart pie = new pieChart();
                
              SwingWrapper swingWrapper = new SwingWrapper(chart); //.displayChart();
               JFrame displayChart = swingWrapper.displayChart();
                displayChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                
            }

            });
            t.start();
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        //analyza voyidielv systeme
        Object[] possibilities = {"auto","kamion","autobus"};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyberte typ vozidiel ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "osobne");

        //If a string was returned, say so.
        //if ((s != null) && (s.length() > 0)) {
        //    String[] ss = s.split("\\ ");
        if(s != null){
            
        }
        
        ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select\n" +
"    count(case when id_stavu in (1,4,6) then 1  end) as presli,\n" +
"    count(case when id_stavu in (2,3,5,7) then 1  end) as nepresli\n" +
" from s_vozidlo a join s_protokol sp on(sp.id_vozidla=value(a).id)\n" +
"   join s_stav_vozidla sv using(id_stavu)\n" +
"        join s_kontrola using(id_kontroly)\n" +
"            join s_typ_kontroly using(id_typu)"
                + " where value(a)  is of (s_trieda_" + s.trim() +")"
        );
            //ESTE PIE CHART
         PieChart chart = new PieChartBuilder().width(800).height(600).title(getClass().getSimpleName()).build();

         // Customize Chart
         Color[] sliceColors = new Color[] { new Color(224, 68, 14), new Color(230, 105, 62), new Color(236, 143, 110)};
         chart.getStyler().setSeriesColors(sliceColors);
         
         chart.setTitle(s);

        try {
            executeQuery.next();
            chart.addSeries("Presli kontrolou", Integer.parseInt(executeQuery.getString("presli")));
            chart.addSeries("Nepresli kontrolou", Integer.parseInt(executeQuery.getString("nepresli")));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            

         Thread t = new Thread(new Runnable() {
            @Override
            public void run() { 
               // pieChart pie = new pieChart();
                
              SwingWrapper swingWrapper = new SwingWrapper(chart); //.displayChart();
               JFrame displayChart = swingWrapper.displayChart();
                displayChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                
            }

            });
            t.start();
        
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
      
        
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        //zobrazenie idexov
        ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select index_name,index_type,"
                + "table_name from user_indexes where index_name like 'S\\_%' escape '\\'");
         this.jEditorPane1.setContentType("text");
         
         String ret = "";
        try {
            while(executeQuery.next()){
                ret += executeQuery.getString("index_name") + " - " + executeQuery.getString("index_type") 
                        + " On table: " + executeQuery.getString("table_name")+ "\n";
            }
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         
         this.jEditorPane1.setText(ret);
         
         
           
         
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        //prtokoly ktor eneprisli stk
        Object[] possibilities = {"2-Nesposobile na prevadzku","3-Docasne sposobile na prevadzku","5-Komponent nevyhovuje","7-Bezna kont. nevyhovuje"};
        String s = (String)JOptionPane.showInputDialog(
                            this,
                            "Vyberte typ vozidiel ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "osobne");
        String[] param = s.split("-");
        String ret = "";
        if(s != null){
            //nepresli STK
            ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select id_protokolu,stav_vozidla,fotka from s_protokol"
                    + " join s_stav_vozidla using(id_stavu) where id_stavu =" + param[0] + "");
            
            
            
            
            
            
            
            
        }
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
          ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select meno, priezvisko, id_zamestnanca as id,"
                  + " sum(cena_kontroly) as suma, trunc((sum(cena_kontroly)/celkova_suma_kontrol())*100,2) || ' %' as podiel\n" +
"from\n" +
"    s_os_udaje join s_zamestnanec using(rod_cislo)\n" +
"        join s_kontrola using(id_zamestnanca)\n" +
"where\n" +
"    datum_do > sysdate or datum_do is null\n" +
"group by\n" +
"    meno,priezvisko,id_zamestnanca\n" +
"order by suma desc");
        
        try {
            this.jTable2.setModel(TableModels.UniversalTableModel.buildTableModel(executeQuery));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        //zobrazenie zam rozvrhu
         String s = this.okno2(this.jadro.getDbManipulation().getZamestnanciNaVyber(),"Zamestnanci");
        if ((s != null) && (s.length() > 0)) {
            String[] ss = s.split("\\-");
        }
        
        
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        //trzby podla kontroly
        ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select\n" +
"    sum(case when id_typu=1 then cena_kontroly end) as tkosobne,\n" +
"    sum(case when id_typu=2 then cena_kontroly end) as tkautobus,\n" +
"    sum(case when id_typu=3 then cena_kontroly end) as tkkamion,\n" +
"    sum(case when id_typu=4 then cena_kontroly end) as emosobne,\n" +
"    sum(case when id_typu=5 then cena_kontroly end) as emautobus,\n" +
"    sum(case when id_typu=6 then cena_kontroly end) as emkamion,\n" +
"    sum(case when id_typu=7 then cena_kontroly end) as pridkomp,\n" +
"    sum(case when id_typu=8 then cena_kontroly end) as prehlvol\n" +
" from \n" +
"    s_kontrola");
        
        
        
            //ESTE PIE CHART
         PieChart chart = new PieChartBuilder().width(800).height(600).title(getClass().getSimpleName()).build();

         // Customize Chart
         Color[] sliceColors = new Color[] { new Color(224, 68, 14), new Color(230, 105, 62),
             new Color(236, 143, 110), new Color(243, 180, 159), new Color(246, 199, 182),
         new Color(209, 77, 14), new Color(218, 120, 62),new Color(200, 179, 110)};
         chart.getStyler().setSeriesColors(sliceColors);
         
         chart.setTitle("Trzby podla typov");

        try {
            executeQuery.next();
            chart.addSeries("Technicka kontrola - osobne ( " + 
                    Integer.parseInt(executeQuery.getString("tkosobne")) + " EUR)", Integer.parseInt(executeQuery.getString("tkosobne")));
            chart.addSeries("Technicka kontrola - autobus ( "+
                    Integer.parseInt(executeQuery.getString("tkautobus"))  + " EUR)", Integer.parseInt(executeQuery.getString("tkautobus")));
            chart.addSeries("Technicka kontrola - kamion ( "+
                    Integer.parseInt(executeQuery.getString("tkkamion"))+ " EUR)", Integer.parseInt(executeQuery.getString("tkkamion")));
            chart.addSeries("Emisna - osobne ( "+
                    Integer.parseInt(executeQuery.getString("emosobne")) + " EUR)", Integer.parseInt(executeQuery.getString("emosobne")));
            chart.addSeries("Emisna - autobus ( "+
                    Integer.parseInt(executeQuery.getString("emautobus"))+ " EUR)", Integer.parseInt(executeQuery.getString("emautobus")));
            chart.addSeries("Emisna - kamion ( "+
                    Integer.parseInt(executeQuery.getString("emkamion"))+ " EUR)", Integer.parseInt(executeQuery.getString("emkamion")));
            chart.addSeries("Pridanie komp(volit) ( "+
                    Integer.parseInt(executeQuery.getString("pridkomp"))+ " EUR)", Integer.parseInt(executeQuery.getString("pridkomp")));
            chart.addSeries("Prehliadka(volit) ( "+
                    Integer.parseInt(executeQuery.getString("prehlvol"))+ " EUR)", Integer.parseInt(executeQuery.getString("prehlvol")));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            

         Thread t = new Thread(new Runnable() {
            @Override
            public void run() { 
               // pieChart pie = new pieChart();
                
              SwingWrapper swingWrapper = new SwingWrapper(chart); //.displayChart();
               JFrame displayChart = swingWrapper.displayChart();
                displayChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                
            }

            });
            t.start();
        
        
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        //analyza
        Object[] possibilities = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018};
        int s = (int)JOptionPane.showInputDialog(
                            this,
                            "Vyberte typ vozidiel ",
                            "Customized Dialog",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "osobne");

        //If a string was returned, say so.
        //if ((s != null) && (s.length() > 0)) {
        //    String[] ss = s.split("\\ ");
        //if(s != null){
            
        
        
        
        
        
         ResultSet executeQuery = this.jadro.getDbManipulation().executeQuery("select\n" +
"    nvl(sum(case when to_char(datum_kontroly,'MM') = 12  then cena_kontroly end),0) as december,\n" +
"     nvl(sum(case when to_char(datum_kontroly,'MM') = 11  then cena_kontroly end),0) as november,\n" +
"      nvl(sum(case when to_char(datum_kontroly,'MM') = 10  then cena_kontroly end),0) as oktober,\n" +
"       nvl(sum(case when to_char(datum_kontroly,'MM') = 9  then cena_kontroly end),0) as september,\n" +
"        nvl(sum(case when to_char(datum_kontroly,'MM') = 8  then cena_kontroly end),0) as august,\n" +
"     nvl(sum(case when to_char(datum_kontroly,'MM') = 7  then cena_kontroly end),0) as jul,\n" +
"      nvl(sum(case when to_char(datum_kontroly,'MM') = 6  then cena_kontroly end),0) as jun,\n" +
"       nvl(sum(case when to_char(datum_kontroly,'MM') = 5  then cena_kontroly end),0) as maj,\n" +
"        nvl(sum(case when to_char(datum_kontroly,'MM') = 4  then cena_kontroly end),0) as april,\n" +
"     nvl(sum(case when to_char(datum_kontroly,'MM') = 3  then cena_kontroly end),0) as marec,\n" +
"      nvl(sum(case when to_char(datum_kontroly,'MM') = 2  then cena_kontroly end),0) as februar,\n" +
"       nvl(sum(case when to_char(datum_kontroly,'MM') = 1  then cena_kontroly end),0) as januar\n" +
"from \n" +
"    s_kontrola\n" +
"where \n" +
"    to_char(datum_kontroly,'YYYY') = " + s );
        
        
        
            //ESTE PIE CHART
         PieChart chart = new PieChartBuilder().width(800).height(600).title(getClass().getSimpleName()).build();

         // Customize Chart
         Color[] sliceColors = new Color[] { new Color(224, 68, 14), new Color(230, 105, 62),
             new Color(236, 143, 110), new Color(243, 180, 159), new Color(246, 199, 182),
         new Color(209, 77, 14), new Color(218, 120, 62),new Color(200, 179, 110),
         new Color(188, 59, 182),
         new Color(180, 89, 14), new Color(160, 99, 62),new Color(150, 152, 110)};
         
         chart.getStyler().setSeriesColors(sliceColors);
         
         chart.setTitle("Tržby po mesiacoch za rok " +s);

        try {
            executeQuery.next();
            chart.addSeries("januar ( " + 
                    Integer.parseInt(executeQuery.getString("januar")) + " EUR)", Integer.parseInt(executeQuery.getString("januar")));
            chart.addSeries("februar ( "+
                    Integer.parseInt(executeQuery.getString("februar"))  + " EUR)", Integer.parseInt(executeQuery.getString("februar")));
            chart.addSeries("marec ( "+
                    Integer.parseInt(executeQuery.getString("marec"))+ " EUR)", Integer.parseInt(executeQuery.getString("marec")));
            chart.addSeries("april ( "+
                    Integer.parseInt(executeQuery.getString("april")) + " EUR)", Integer.parseInt(executeQuery.getString("april")));
            chart.addSeries("maj ( "+
                    Integer.parseInt(executeQuery.getString("maj"))+ " EUR)", Integer.parseInt(executeQuery.getString("maj")));
            chart.addSeries("jun ( "+
                    Integer.parseInt(executeQuery.getString("jun"))+ " EUR)", Integer.parseInt(executeQuery.getString("jun")));
            chart.addSeries("jul ( "+
                    Integer.parseInt(executeQuery.getString("jul"))+ " EUR)", Integer.parseInt(executeQuery.getString("jul")));
            chart.addSeries("august ( "+
                    Integer.parseInt(executeQuery.getString("august"))+ " EUR)", Integer.parseInt(executeQuery.getString("august")));
            chart.addSeries("september ( "+
                    Integer.parseInt(executeQuery.getString("september"))+ " EUR)", Integer.parseInt(executeQuery.getString("september")));
            chart.addSeries("oktober ( "+
                    Integer.parseInt(executeQuery.getString("oktober"))+ " EUR)", Integer.parseInt(executeQuery.getString("oktober")));
            chart.addSeries("november ( "+
                    Integer.parseInt(executeQuery.getString("november"))+ " EUR)", Integer.parseInt(executeQuery.getString("november")));
            chart.addSeries("december ( "+
                    Integer.parseInt(executeQuery.getString("december"))+ " EUR)", Integer.parseInt(executeQuery.getString("december")));
        } catch (SQLException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            

         Thread t = new Thread(new Runnable() {
            @Override
            public void run() { 
               // pieChart pie = new pieChart();
                
              SwingWrapper swingWrapper = new SwingWrapper(chart); //.displayChart();
               JFrame displayChart = swingWrapper.displayChart();
                displayChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                
            }

            });
            t.start();
        
       // }else{
       //     this.jEditorPane1.setContentType("text");
       //     this.jEditorPane1.setText("Nevybraty rok");
      //  }
        
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        try {
            //statistika vozidiel co nepresli
            String clobXML = this.jadro.getDbManipulation().executeProcedure("statistika()");
            
            //TABLE DATA
            double[] yData = new double[19];
            double[] xData = new double[19];
            
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            StringBuilder xmlStringBuilder = new StringBuilder();
            xmlStringBuilder.append(clobXML);
            ByteArrayInputStream input = new ByteArrayInputStream(
                    xmlStringBuilder.toString().getBytes("UTF-8"));
            Document doc = dBuilder.parse(input);
            
                   
            doc.getDocumentElement().normalize();
            System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
            Element zamestnanec = (Element) doc.getElementsByTagName("ROWSET").item(0);
            NodeList rows = zamestnanec.getElementsByTagName("ROW");
            
            
            //roky
            for (int i = 0; i < xData.length; i++) {
                xData[i] = 2000 +i;
            }
            
            //
            for(int i = 0 ; i < rows.getLength(); i++){
                String[] data = new String[1];
                Node row = rows.item(i);
                if(row.getNodeType() == Node.ELEMENT_NODE){
                    Element el = (Element) row;
                    double d = Double.parseDouble(el.getElementsByTagName("POCET").item(0).getTextContent().replace(',', '.'));
                    
                    //to tbl
                   
                    yData[i] = d;
                }
            }
            
            //hlavicka tabulky
            XYChart chart = QuickChart.getChart("Počet vozidiel, ktoré nesplnili kritériá kontroly",
                    "Roky", "Percentá vozidiel (neprešli) %", "neprešli v %", xData, yData);
            //spustenie grafu
            chart.getStyler().setYAxisMax(100.0);
            
            
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    
                    SwingWrapper swingWrapper = new SwingWrapper(chart); //.displayChart();
                    JFrame displayChart = swingWrapper.displayChart();
                    displayChart.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    
                }
                
            });
            t.start();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HlavneOknoGUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HlavneOknoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HlavneOknoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HlavneOknoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HlavneOknoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new HlavneOknoGUI().setVisible(true);
                
            }
        });
    }
    
    public String okno2(Object[] pole,String param){
        return (String)JOptionPane.showInputDialog(
                        this,
                        "Vyberte obcana\n"
                        + "\"zo zoznamu " + param +":\"",
                        "Customized Dialog",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        pole,
                        "Najprv vytvorte obcanov!");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}


